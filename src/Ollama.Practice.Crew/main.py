import os
import datetime
from qdrant_client import QdrantClient
from crewai import Crew, Agent, Task, LLM
from crewai_tools import QdrantVectorSearchTool

timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

output_dir = f"./output/{timestamp}"
os.makedirs(output_dir, exist_ok=True)

qdrant_conn = os.getenv("ConnectionStrings__qdrant-ollama_http")
collection_name = os.getenv("CollectionName")
model_conn = os.getenv("ConnectionStrings__model")

qdrant_conn_parts = qdrant_conn.split(";")
qdrant_url = next(p.split("=", 1)[1] for p in qdrant_conn_parts if p.startswith("Endpoint="))
qdrant_key = next(p.split("=", 1)[1] for p in qdrant_conn_parts if p.startswith("Key="))

# Starts as: "Endpoint=http://localhost:38307;Model=hf.co/bartowski/Llama-3.2-1B-Instruct-GGUF:IQ4_XS"
ollama_conn_parts = model_conn.split(";")
# Split out "http://localhost:38307"
ollama_url = next(p.split("=", 1)[1] for p in ollama_conn_parts if p.startswith("Endpoint="))
# Split out "hf.co/bartowski/Llama-3.2-1B-Instruct-GGUF:IQ4_XS" 
ollama_model_path = next(p.split("=", 1)[1] for p in ollama_conn_parts if p.startswith("Model="))
# Split out "Llama-3.2-1B-Instruct-GGUF"
ollama_model = ollama_model_path #.split("/")[-1].split(":")[0]

print(f"Using CollectionName: {collection_name}")
print(f"Using qdrant_conn: {qdrant_conn}")
print(f"Using Qdrant URL: {qdrant_url}")
print(f"Using Qdrant Key: {qdrant_key}")
print(f"Using model_conn: {model_conn}")
print(f"Using Ollama Endpoint: {ollama_url}")
print(f"Using Ollama Model: {ollama_model}")

client = QdrantClient(url=qdrant_url, api_key=qdrant_key)

if not client.collection_exists(collection_name):
    raise RuntimeError(f"Qdrant collection '{collection_name}' does not exist. Aborting.")

qdrant_tool = QdrantVectorSearchTool(
    qdrant_url=qdrant_url,
    qdrant_api_key=qdrant_key,
    collection_name=collection_name,
    limit=3,
    score_threshold=0.35
)

llm = LLM(model=f"ollama/{ollama_model}", base_url=ollama_url)

toolNote = """
NOTE: When invoking a json tool, do NOT enclose your query in ``` or ```json or etc,
Your query is going to be parsed by a tool recognizer, which only recognizes your query
as a valid tool trigger if it is PURE json, no newlines, no backticks, 
and no other text before or after the json. 
When invoking tool names, only supply JUST the name, don't include any text before or after
"""

summarizer_agent = Agent(
    role="Senior Semantic Summary Agent",
    goal="Find and summarize documents based on semantic search",
    backstory=
    """
    You are an expert research assistant who can find relevant information using 
    semantic search in a Qdrant database and summarize it professionally.\n
    """ + toolNote,
    tools=[qdrant_tool],
    llm=llm,
    verbose=True
)

quiz_maker_agent = Agent(
    role="Quiz Maker Agent",
    goal="Generate 3 multiple-choice quizzes from the vector database content",
    backstory="""
    You are a knowledgeable educator who creates clear, engaging multiple-choice 
    quizzes based on semantic search results.\n
    """ + toolNote,
    tools=[qdrant_tool],
    llm=llm,
    verbose=True
)

quiz_solver_agent = Agent(
    role="Quiz Solver Agent",
    goal="Answer multiple-choice quizzes generated by the Quiz Maker",
    backstory="""
    You are an intelligent assistant skilled at understanding and answering 
    multiple-choice quizzes accurately, using semantic search to help you.
    """ + toolNote, 
    tools=[qdrant_tool],
    llm=llm,
    verbose=True
)

summarize_task = Task(
    description="Summarize the content from the vector database clearly and concisely.",
    expected_output="A clear and concise textual summary of the vector database content.",
    agent=summarizer_agent,
    tools=[qdrant_tool],
    output_file=f"{output_dir}/summary.txt",
    async_execution=True
)

quiz_maker_task = Task(
    description="Create 3 multiple-choice questions based on the vector database content.",
    expected_output="Three well-formatted multiple-choice questions with 4 options each.",
    agent=quiz_maker_agent,
    tools=[qdrant_tool],
    output_file=f"{output_dir}/quiz.txt",
    async_execution=True
)

quiz_solver_task = Task(
    description="Answer the multiple-choice quizzes accurately based on the vector database.",
    expected_output="Correctly chosen answers for each multiple-choice question with brief justifications",
    agent=quiz_solver_agent,
    tools=[qdrant_tool],
    output_file=f"{output_dir}/answers.txt",
    context=[quiz_maker_task]
)

crew = Crew(
    agents=[summarizer_agent, quiz_maker_agent, quiz_solver_agent],
    tasks=[summarize_task, quiz_maker_task, quiz_solver_task],
    verbose=True
)

result = crew.kickoff()
