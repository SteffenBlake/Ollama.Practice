import os
import datetime
from qdrant_client import QdrantClient
from langchain_ollama import OllamaEmbeddings
from langchain_qdrant import Qdrant
from langchain.chains import RetrievalQA
from langchain.llms import Ollama
from crewai import Crew, Agent, Task

timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

qdrant_conn = os.getenv("ConnectionStrings__qdrant-ollama_http")
collection_name = os.getenv("CollectionName")
model_conn = os.getenv("ConnectionStrings__model")

qdrant_conn_parts = qdrant_conn.split(";")
qdrant_url = next(p.split("=", 1)[1] for p in qdrant_conn_parts if p.startswith("Endpoint="))
qdrant_key = next(p.split("=", 1)[1] for p in qdrant_conn_parts if p.startswith("Key="))

ollama_conn_parts = model_conn.split(";")
ollama_url = next(p.split("=", 1)[1] for p in ollama_conn_parts if p.startswith("Endpoint="))
ollama_model = next(p.split("=", 1)[1] for p in ollama_conn_parts if p.startswith("Model="))

print(f"Using CollectionName: {collection_name}")
print(f"Using qdrant_conn: {qdrant_conn}")
print(f"Using Qdrant URL: {qdrant_url}")
print(f"Using Qdrant Key: {qdrant_key}")
print(f"Using model_conn: {model_conn}")
print(f"Using Ollama Endpoint: {ollama_url}")
print(f"Using Ollama Model: {ollama_model}")

client = QdrantClient(url=qdrant_url, api_key=qdrant_key)

if not client.collection_exists(collection_name):
    raise RuntimeError(f"Qdrant collection '{collection_name}' does not exist. Aborting.")

embeddings = OllamaEmbeddings(model=ollama_model, base_url=ollama_url)
vectorstore = Qdrant(
    embedding_function=embeddings,
    url=qdrant_url,
    api_key=qdrant_key,
    collection_name=collection_name,
)

retriever = vectorstore.as_retriever()

llm = Ollama(model=ollama_model, base_url=ollama_url)

def summarizer_task():
    chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever, return_source_documents=False)
    summary = chain.run("Summarize the content of the vector database succinctly.")
    filename = f"{timestamp}_summary.txt"
    with open(filename, "w") as f:
        f.write(summary)
    print(f"Summary written to {filename}")

summarizer = Agent(
    name="Summarizer",
    task=Task(
        name="SummarizeDB",
        fn=summarizer_task,
        description="Summarizes the vector database"
    )
)

def quiz_maker_task():
    chain = RetrievalQA.from_chain_type(
        llm=llm, retriever=retriever, return_source_documents=False
    )
    for i in range(1, 4):
        prompt = f"Create a multiple-choice quiz (3 questions) based on the vector DB content. Quiz #{i}."
        quiz = chain.run(prompt)
        filename = f"{timestamp}_quiz_{i}.txt"
        with open(filename, "w") as f:
            f.write(quiz)
        print(f"Quiz #{i} written to {filename}")

quiz_maker = Agent(
    name="QuizMaker",
    task=Task(
        name="CreateQuizzes",
        fn=quiz_maker_task,
        description="Generates 3 multiple-choice quizzes from the vector database."
    )
)

def quiz_taker_task():
    for i in range(1, 4):
        quiz_filename = f"{timestamp}_quiz_{i}.txt"
        with open(quiz_filename, "r") as f:
            quiz_content = f.read()
        prompt = f"Answer the following multiple-choice quiz:\n\n{quiz_content}"
        answer = llm(prompt)
        answer_file = f"{timestamp}_answers_{i}.txt"
        with open(answer_file, "w") as f:
            f.write(answer)
        print(f"Answers for Quiz #{i} written to {answer_file}")

quiz_taker = Agent(
    name="QuizTaker",
    task=Task(
        name="AnswerQuizzes",
        fn=quiz_taker_task,
        description="Answers each multiple-choice quiz generated by QuizMaker."
    )
)

crew = Crew(agents=[summarizer, quiz_maker, quiz_taker])

crew.set_dependencies({
    "QuizTaker": ["QuizMaker"]
})

crew.run()
